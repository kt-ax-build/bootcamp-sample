{
  "info": {
    "name": "Hackathon API Collection",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "hackathon-api-collection"
  },
  "item": [
    {
      "name": "Create Application",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"200 or 201\", function () {",
              "  pm.expect([200, 201]).to.include(pm.response.code);",
              "});",
              "const json = pm.response.json();",
              "pm.expect(json).to.have.property(\"id\");",
              "pm.environment.set(\"createdApplicationId\", String(json.id));"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "{{contentType}}" }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications",
          "host": ["{{baseUrl}}"],
          "path": ["api", "hackathon", "{{apiVersion}}", "applications"]
        },
        "body": {
          "mode": "raw",
          "raw": "{{createPayload}}"
        }
      }
    },
    {
      "name": "List Applications - All",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications",
          "host": ["{{baseUrl}}"],
          "path": ["api", "hackathon", "{{apiVersion}}", "applications"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": { "type": "text/javascript", "exec": ["pm.test(\"200\",()=>pm.response.to.have.status(200));"] }
        }
      ]
    },
    {
      "name": "List by TeamName",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications?teamName={{runTeamName}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "hackathon", "{{apiVersion}}", "applications"],
          "query": [ {"key": "teamName", "value": "{{runTeamName}}"} ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"200\",()=>pm.response.to.have.status(200));",
              "(pm.response.json()||[]).forEach(i=>pm.expect(i.team.teamName).to.eql(pm.environment.get('runTeamName')));"
            ]
          }
        }
      ]
    },
    {
      "name": "List by MemberName (name)",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications?memberName={{testMemberName}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "hackathon", "{{apiVersion}}", "applications"],
          "query": [ {"key": "memberName", "value": "{{testMemberName}}"} ]
        }
      },
      "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test(\"200\",()=>pm.response.to.have.status(200));"] } } ]
    },
    {
      "name": "List by MemberName (email)",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications?memberName={{testMemberEmail}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "hackathon", "{{apiVersion}}", "applications"],
          "query": [ {"key": "memberName", "value": "{{testMemberEmail}}"} ]
        }
      },
      "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test(\"200\",()=>pm.response.to.have.status(200));"] } } ]
    },
    {
      "name": "Get Application by ID (exists)",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications/{{createdApplicationId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "hackathon", "{{apiVersion}}", "applications", "{{createdApplicationId}}"]
        }
      },
      "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test(\"200\",()=>pm.response.to.have.status(200));"] } } ]
    },
    {
      "name": "Get Application by ID (not exists)",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications/999999",
          "host": ["{{baseUrl}}"],
          "path": ["api", "hackathon", "{{apiVersion}}", "applications", "999999"]
        }
      },
      "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test(\"404 or 500\",()=>pm.expect([404,500]).to.include(pm.response.code));"] } } ]
    },
    {
      "name": "Update with TeamName (replace members)",
      "request": {
        "method": "PUT",
        "header": [ {"key":"Content-Type","value":"{{contentType}}"} ],
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications/{{createdApplicationId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api","hackathon","{{apiVersion}}","applications","{{createdApplicationId}}"]
        },
        "body": {"mode":"raw","raw":"{{updateWithTeamNamePayload}}"}
      },
      "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test(\"200\",()=>pm.response.to.have.status(200));"] } } ]
    },
    {
      "name": "Update without TeamName (update fields/members)",
      "request": {
        "method": "PUT",
        "header": [ {"key":"Content-Type","value":"{{contentType}}"} ],
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications/{{createdApplicationId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api","hackathon","{{apiVersion}}","applications","{{createdApplicationId}}"]
        },
        "body": {"mode":"raw","raw":"{{updateWithoutTeamNamePayload}}"}
      },
      "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test(\"200\",()=>pm.response.to.have.status(200));"] } } ]
    },
    {
      "name": "Delete Application",
      "request": {
        "method": "DELETE",
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications/{{createdApplicationId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api","hackathon","{{apiVersion}}","applications","{{createdApplicationId}}"]
        }
      },
      "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test(\"204 or 200\",()=>pm.expect([204,200]).to.include(pm.response.code));"] } } ]
    },
    {
      "name": "Get After Delete (eventual)",
      "event": [
        {
          "listen": "prerequest",
          "script": {"type": "text/javascript", "exec": ["setTimeout(()=>{},300);"]}
        },
        {
          "listen": "test",
          "script": {"type":"text/javascript","exec":["pm.test(\"200/204/404/500\",()=>pm.expect([200,204,404,500]).to.include(pm.response.code));"]}
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications/{{createdApplicationId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api","hackathon","{{apiVersion}}","applications","{{createdApplicationId}}"]
        }
      }
    },
    {
      "name": "Delete Not Exists",
      "request": {
        "method": "DELETE",
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications/999999",
          "host": ["{{baseUrl}}"],
          "path": ["api","hackathon","{{apiVersion}}","applications","999999"]
        }
      },
      "event": [ {"listen":"test","script":{"type":"text/javascript","exec":["pm.test(\"204/404/500\",()=>pm.expect([204,404,500]).to.include(pm.response.code));"]}} ]
    },
    {
      "name": "Create Another Application",
      "request": {
        "method": "POST",
        "header": [ {"key":"Content-Type","value":"{{contentType}}"} ],
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications",
          "host": ["{{baseUrl}}"],
          "path": ["api","hackathon","{{apiVersion}}","applications"]
        },
        "body": {"mode":"raw","raw":"{{createPayload2}}"}
      },
      "event": [ {"listen":"test","script":{"type":"text/javascript","exec":[
        "pm.test(\"200 or 201\", function () { pm.expect([200, 201]).to.include(pm.response.code); });",
        "const json = pm.response.json(); pm.expect(json).to.have.property('id'); pm.environment.set('createdApplicationId', String(json.id));"
      ]}} ]
    },
    {
      "name": "Delete Second Application",
      "request": {
        "method": "DELETE",
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications/{{createdApplicationId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api","hackathon","{{apiVersion}}","applications","{{createdApplicationId}}"]
        }
      },
      "event": [ {"listen":"test","script":{"type":"text/javascript","exec":["pm.test(\"204 or 200\",()=>pm.expect([204,200]).to.include(pm.response.code));"]}} ]
    },
    {
      "name": "List with empty filters",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications?teamName=&memberName=",
          "host": ["{{baseUrl}}"],
          "path": ["api","hackathon","{{apiVersion}}","applications"],
          "query": [ {"key":"teamName","value":""}, {"key":"memberName","value":""} ]
        }
      },
      "event": [ {"listen":"test","script":{"type":"text/javascript","exec":["pm.test(\"200\",()=>pm.response.to.have.status(200));"]}} ]
    },
    {
      "name": "List by unknown team name",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications?teamName=__UNKNOWN__{{runTeamName}}__",
          "host": ["{{baseUrl}}"],
          "path": ["api","hackathon","{{apiVersion}}","applications"],
          "query": [ {"key":"teamName","value":"__UNKNOWN__{{runTeamName}}__"} ]
        }
      },
      "event": [ {"listen":"test","script":{"type":"text/javascript","exec":[
        "pm.test(\"200\",()=>pm.response.to.have.status(200));",
        "pm.test(\"allow empty array\",()=>pm.expect(Array.isArray(pm.response.json())).to.be.true);"
      ]}} ]
    },
    {
      "name": "List with whitespace filters",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/api/hackathon/{{apiVersion}}/applications?teamName=%20%20%20&memberName=%20%20",
          "host": ["{{baseUrl}}"],
          "path": ["api","hackathon","{{apiVersion}}","applications"],
          "query": [ {"key":"teamName","value":"   "}, {"key":"memberName","value":"  "} ]
        }
      },
      "event": [ {"listen":"test","script":{"type":"text/javascript","exec":["pm.test(\"200\",()=>pm.response.to.have.status(200));"]}} ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "if (!pm.environment.get('runTeamName')) {",
          "  const base = pm.environment.get('testTeamName') || 'AI개발팀';",
          "  pm.environment.set('runTeamName', base + '-' + Date.now());",
          "}",
          "if (!pm.environment.get('testMemberEmail')) { pm.environment.set('testMemberEmail', 'member1@example.com'); }",
          "pm.environment.set('createPayload', JSON.stringify({",
          "  teamName: pm.environment.get('runTeamName'),",
          "  teamSize: '3',",
          "  teamDescription: 'desc',",
          "  ideaTitle: pm.environment.get('testIdeaTitle') || 'AI 챗봇 서비스',",
          "  ideaDescription: pm.environment.get('testIdeaDescription') || '아이디어',",
          "  problemStatement: '문제',",
          "  solutionApproach: '접근',",
          "  techStack: 'Java,Spring',",
          "  members: [",
          "    { name: pm.environment.get('testMemberName') || '김개발', email: 'member1@example.com' },",
          "    { name: '홍개발', email: 'member2@example.com' }",
          "  ]",
          "}));",
          "pm.environment.set('updateWithTeamNamePayload', JSON.stringify({",
          "  teamName: pm.environment.get('runTeamName'),",
          "  members: [ { name: '새멤버', email: 'new@example.com' } ]",
          "}));",
          "pm.environment.set('updateWithoutTeamNamePayload', JSON.stringify({",
          "  teamSize: '5',",
          "  teamDescription: 'updated',",
          "  ideaTitle: 'updated title',",
          "  ideaDescription: 'updated desc',",
          "  problemStatement: 'p',",
          "  solutionApproach: 's',",
          "  techStack: 't',",
          "  members: [ { name: 'A', email: 'a@example.com' }, { name: 'B', email: 'b@example.com' } ]",
          "}));",
          "pm.environment.set('createPayload2', JSON.stringify({",
          "  teamName: pm.environment.get('runTeamName') + '-2',",
          "  ideaTitle: 'T2',",
          "  ideaDescription: 'D2',",
          "  problemStatement: 'P2',",
          "  solutionApproach: 'S2',",
          "  techStack: 'TS2',",
          "  members: [ { name: 'C', email: 'c@example.com' } ]",
          "}));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "pm.test('collection loaded', function(){ pm.expect(true).to.be.true; });"
        ]
      }
    }
  ]
}


